name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
env:
    AWS_REGION: MY_AWS_REGION                   # set this to your preferred AWS region, e.g. us-west-1
    ECR_REPOSITORY: MY_ECR_REPOSITORY           # set this to your Amazon ECR repository name
    ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
    ECS_CLUSTER: MY_ECS_CLUSTER                 # set this to your Amazon ECS cluster name
    ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition                                           # file, e.g. .aws/task-definition.json
    CONTAINER_NAME: MY_CONTAINER_NAME           # set this to the name of the container in the
                                                # containerDefinitions section of your task definition
    DOCKER_USERNAME: MY_DOCKER_USERNAME         # set this to your Docker Hub username
    DOCKER_PASSWORD: MY_DOCKER_PASSWORD         # set this to your Docker Hub password  
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY}}

permissions:                                                  
  contents: read

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Run Prisma migrations
        run: npx prisma migrate deploy

      - name: Run tests
        run: npm test

      - name: Build project
        run: npm run build

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to Docker Hub 
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and push Docker image (if using Docker)
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/portfolio-app:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/portfolio-app:latest

      - name: Deploy to ECS (if using AWS ECS)
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}
          aws ecs update-service --cluster ${{ secrets.AWS_ECS_CLUSTER }} --service ${{ secrets.AWS_ECS_SERVICE }} --force-new-deployment
    